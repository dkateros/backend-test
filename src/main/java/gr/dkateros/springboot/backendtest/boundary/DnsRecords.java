package gr.dkateros.springboot.backendtest.boundary;

import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import gr.dkateros.springboot.backendtest.control.DnsRecordRepository;
import gr.dkateros.springboot.backendtest.control.PythonScriptLauncher;
import gr.dkateros.springboot.backendtest.entity.DnsRecord;

/**
 * RESTful boundary for CRUD operations on {@link DnsRecord}s.
 */
@RestController
@RequestMapping(path="/rs")
public class DnsRecords {
	
	AtomicInteger processedRequests = new AtomicInteger();
	
	@Autowired DnsRecordRepository dao;
	
	@Autowired PythonScriptLauncher launcher;

	@RequestMapping(value = "/dnsrecord/", method = RequestMethod.POST, consumes=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<String> create(@RequestBody DnsRecord dnsRecord, UriComponentsBuilder ucBuilder) {
		if(dnsRecord.getId() != null) {
			return new ResponseEntity<String>("ids are autogenerated!", HttpStatus.BAD_REQUEST);
		}
		dao.save(dnsRecord);
		HttpHeaders headers = new HttpHeaders();
		headers.setLocation(ucBuilder.path("/api/dnsrecord/{id}").buildAndExpand(dnsRecord.getId()).toUri());
		launchPythonScript();
		return new ResponseEntity<String>(headers, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/dnsrecord/{id}", method = RequestMethod.GET, produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> read(@PathVariable("id") long id) {
		Optional<DnsRecord> record = dao.findById(id);
		if(!record.isPresent()) {
			launchPythonScript();
			return new ResponseEntity<String>("Non existing record with id " + id, HttpStatus.NOT_FOUND);
		}
		launchPythonScript();
		return new ResponseEntity<DnsRecord>(record.get(), HttpStatus.OK);
	}
	
	@RequestMapping(value = "/dnsrecord/{id}", method = RequestMethod.POST, consumes=MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> update(@PathVariable("id") long id, @RequestBody DnsRecord dnsRecord) {
		Optional<DnsRecord> result = dao.findById(id);
		if(!result.isPresent()) {
			return new ResponseEntity<String>("Non existing record with id " + id, HttpStatus.NOT_FOUND);
		}
		
		DnsRecord existing = result.get();
		existing.setIpAddress(dnsRecord.getIpAddress());
		existing.setHostName(dnsRecord.getHostName());
		dao.save(existing);
		launchPythonScript();
		return new ResponseEntity<DnsRecord>(existing, HttpStatus.OK);
	}

	@RequestMapping(value = "/dnsrecord/{id}", method = RequestMethod.DELETE)
    public ResponseEntity<?> delete(@PathVariable("id") long id) {
		Optional<DnsRecord> result = dao.findById(id);
		if(!result.isPresent()) {
			return new ResponseEntity<String>("Non existing record with id " + id, HttpStatus.NOT_FOUND);
		}
        dao.delete(result.get());
        launchPythonScript();
        return new ResponseEntity<String>(HttpStatus.NO_CONTENT);
    }
	
	int launchPythonScript() {
		return launcher.execute(processedRequests.incrementAndGet());
	}
	
}
